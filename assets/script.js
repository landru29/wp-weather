(()=>{"use strict";var e=function(){function e(e){this.ctx=e.getContext("2d"),this.centerY=e.height/2,this.centerX=e.width/2,this.square=2*(this.centerY>this.centerX?this.centerX:this.centerY),this.clear();for(var t=0;t<360;t+=10)this.displayMark(t,"#888");for(t=45;t<360;t+=90)this.displayCardinal(t,!1,{color:"#cecece"}),this.displayCardinal(t,!0,{color:"#dfdfdf"});for(t=0;t<360;t+=90)this.displayCardinal(t,!1,{color:"#ccc"}),this.displayCardinal(t,!0,{color:"#ddd"})}return e.prototype.clear=function(){this.ctx.clearRect(0,0,this.centerX,this.centerY)},e.prototype.displayCardinal=function(e,t,i){var n=i&&i.width||this.square/15,a=i&&i.height||this.square/2,s=i&&i.color||"#ccc";this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(e*Math.PI/180),this.ctx.moveTo(t?n:-n,-n),this.ctx.lineTo(0,-a),this.ctx.lineTo(0,0),this.ctx.lineTo(t?n:-n,-n),this.ctx.fillStyle=s,this.ctx.fill(),this.ctx.closePath(),this.ctx.restore()},e.prototype.displayMark=function(e,t){void 0===t&&(t="#000"),this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(e*Math.PI/180),this.ctx.moveTo(0,-this.square/2),this.ctx.lineTo(0,-this.square/2*.95),this.ctx.strokeStyle=t,this.ctx.stroke(),this.ctx.closePath(),this.ctx.restore()},e.prototype.displayWind=function(e,t,i,n){if(void 0===t&&(t=""),void 0===i&&(i=18),void 0===n&&(n="#1d528e"),null!=e){this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(e*Math.PI/180),this.ctx.moveTo(0,-this.square/5),this.ctx.lineTo(0,-this.square/2*.93),this.ctx.strokeStyle=n,this.ctx.stroke(),this.ctx.closePath(),this.ctx.restore();var a=this.square/25;this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(e*Math.PI/180),this.ctx.moveTo(.5*a,-a-this.square/5),this.ctx.lineTo(0,-this.square/5),this.ctx.lineTo(.5*-a,-a-this.square/5),this.ctx.moveTo(.5*a,-a-this.square/5),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.closePath(),this.ctx.restore()}this.ctx.save(),this.ctx.translate(this.centerX,this.centerY),this.ctx.font=i+"px sans serif",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle=n,null!=e&&this.ctx.fillText(e.toFixed(0)+"°",0,i/1.8),this.ctx.fillText(""+t,0,-i/1.8),this.ctx.restore()},e}(),t=function(){function t(e,t){this.container=e,this.lang=t}return t.prototype.display=function(t){var i=this;return new Promise((function(n,a){var s={fr:{wind:"Vent",temp:"Temp",dew:"Rosée",pressure:"Pression",visibility:"Visibilité",error:"Erreur",raw:"Original"},en:{wind:"Wind",temp:"Temp",dew:"Dew",pressure:"Pressure",visibility:"Visibility",error:"error",raw:"Original"}};if(t.wind_speed){var r=jQuery('<canvas class="wind" width="100px" height="100px"></canvas>'),l=r.get(0);i.container.append(r),new e(l).displayWind(t.wind_direction.value,t.wind_speed.value+" "+t.units.wind_speed,15,"#ca2017")}if(t.temperature&&i.container.append('<div class="form-element"><label>'+s[i.lang].temp+':</label><span class="value">'+t.temperature.value+"<em>°"+t.units.temperature+"</em></span></div>"),t.dewpoint&&i.container.append('<div class="form-element"><label>'+s[i.lang].dew+':</label><span class="value">'+t.dewpoint.value+"<em>°"+t.units.temperature+"</em></span></div>"),t.altimeter&&i.container.append('<div class="form-element"><label>'+s[i.lang].pressure+':</label><span class="value">'+t.altimeter.value+"<em>"+t.units.altimeter+"</em></span></div>"),t.visibility){var o='<span class="value">'+t.visibility.value+"<em>"+t.units.visibility+"</em></span>";"CAVOK"==t.visibility.repr&&(o='<span class="value">'+{fr:"Nuages et visibilité sont OK,",en:"Ceiling and visibility OK"}[i.lang]+"</span>"),i.container.append('<div class="form-element"><label>'+s[i.lang].visibility+":</label>"+o+"</div>")}if(t.remarks){var c={fr:{NOSIG:"Aucun changement significatif dans les deux heures à venir",BECMG:"Changements prévus entre les heures indiquées",GRADU:"Changements prévus qui va arriver progressivement",RAPID:"Changements prévus rapidement (avant une demi-heure en moyenne)",TEMPO:"Fluctuations temporaires dans un bloc de 1 à 4 heures.",INTER:"Changements fréquents mais brefs",TEND:"Tendance"},en:{NOSIG:"No significant change",BECMG:"Becoming",GRADU:"Gradualy",RAPID:"Rapidly",TEMPO:"Temporary changes expected",INTER:"Intermittent",TEND:"Trend"}}[i.lang][t.remarks];c||(c=t.remarks),i.container.append('<div class="form-element"><label>Remarque:</label><span class="value">'+c+"</span></div>")}if(t.clouds&&t.clouds.length){var u={fr:{SKC:"aucun nuage [SKC]",FEW:"quelques nuages, 1/8 à 2/8 du ciel couvert [FEW]",SCT:"épars, 3/8 à 4/8 du ciel couvert [SCT]",BKN:"fragmenté, 5/8 à 7/8 du ciel couvert [BKN]",OVC:"couvert, 8/8 du ciel couvert [OVC]",NSC:"aucun nuage d'une hauteur inférieure à 5 000 pieds ou sous l'altitude minimale de secteur [NSC]"},en:{SKC:"sky [SKC]",FEW:"few, 1/8 - 2/8 [FEW]",SCT:"scattered, 3/8 - 4/8 [SCT]",BKN:"broken, 5/8 - 7/8 [BKN]",OVC:"overcast, 8/8 [OVC]",NSC:"No significant clouds [NSC]"}},d=t.clouds.map((function(e){return'<li class="cloud-item"><span class="cloud-altitude">Alt '+e.altitude+" "+t.units.altitude+":</span> "+u[i.lang][e.type]+"</li>"}));i.container.append('<div class="form-element"><label>Nuages:</label><ul class="value">'+d.join("\n")+"</ul></div>")}t.raw&&i.container.append('<div class="form-element"><label>'+s[i.lang].raw+':</label><span class="value">'+t.raw+"</span></div>"),n(t)}))},t}(),i=function(){function e(e,t){this.container=e,this.lang=t}return e.prototype.display=function(e){var i=this;return new Promise((function(n,a){var s={};if(!e.forecast.length)return n(e);var r=jQuery('<div class="switch-box source-selector"></div>');r.append('<label for="default" class="switch-box-label">MVFR</label>');var l=jQuery('<input id="default" class="switch-box-input" type="checkbox" />');r.append(l),r.append('<label for="default" class="switch-box-slider"></label>'),r.append('<label for="default" class="switch-box-label">IFR</label>'),i.container.append(r),l.on("change",(function(e){var t=jQuery(e.target).is(":checked")?"IFR":"MVFR";Object.keys(s).forEach((function(e){s[e].container.removeClass("visible")})),s[t]&&s[t].container&&s[t].container.addClass("visible")}));var o=jQuery('<div class="forecast"></div>');i.container.append(o),e.forecast.forEach((function(n){s[n.flight_rules]||(s[n.flight_rules]={container:jQuery('<div class="'+n.flight_rules+'"></div>'),timeline:jQuery('<div class="timeline"></div>'),data:{}},o.append(s[n.flight_rules].container),s[n.flight_rules].container.append(s[n.flight_rules].timeline)),s[n.flight_rules].data[n.end_time.dt]=n;var a=n;a.frame=jQuery('<div class="tab"></div>'),s[n.flight_rules].container.append(a.frame),a.units=e.units;var r=new Date(n.end_time.dt),l=jQuery('<button class="time-tab">'+r.getDate().leading(2)+"/"+r.getMonth()+" "+r.getHours().leading(2)+":"+r.getMinutes().leading(2)+"</button>");s[n.flight_rules].timeline.append(l),1==Object.keys(s[n.flight_rules].data).length&&(s[n.flight_rules].data[n.end_time.dt].frame.addClass("visible"),l.addClass("selected")),l.on("click",(function(e){s[n.flight_rules].timeline.children().each((function(e,t){jQuery(t).removeClass("selected")})),jQuery(e.target).addClass("selected"),s[n.flight_rules].container.find("div.tab").each((function(e,t){jQuery(t).removeClass("visible")})),s[n.flight_rules].data[n.end_time.dt].frame.addClass("visible")})),new t(a.frame,i.lang).display(a)})),s.MVFR.container.addClass("visible"),e.raw&&i.container.append('<div class="form-element"><label>Taf:</label><span class="value">'+e.raw+"</span></div>"),n(e)}))},e}();Number.prototype.leading=function(e,t){return void 0===t&&(t="0"),(Array(e).fill(t).join("")+this).substr(-e)};var n=function(){function e(e){this.dl=e,this.currentTab="metar",this.config=window.weatherConfig,this.currentLocation=this.config.locations[0]}return e.prototype.getLang=function(){return"fr"==this.config.lang?this.config.lang:"en"},e.prototype.tabShowOnly=function(e){jQuery("div.weather-widget-placeholder").children().each((function(t,i){jQuery(i).css("display","none"),jQuery("."+e).css("display","block")}))},e.prototype.addTab=function(e,t,i,n,a){var s=this;void 0===a&&(a=!1);var r=jQuery('<button class="'+(a?"selected":"")+'">'+t+"</button>");r.on("click",(function(t){i.children().each((function(e,t){jQuery(t).removeClass("selected")})),jQuery(t.currentTarget).addClass("selected"),s.tabShowOnly("weather-loading"),s.currentTab=e,s.loadWeather(e,s.currentLocation)})),i.append(r),n.append('<div class="tab-'+e+'"></div>')},e.prototype.loadWeather=function(e,t){var i=this;this.dl.load(this.config.url[e],e,t,this.getLang(),(function(t){t.station.toUpperCase(),i.tabShowOnly("tab-"+e),i.displayData(e,jQuery("div.tab-"+e),t)}))},e.prototype.displayData=function(e,n,a){var s,r=this,l=this.getLang();if(n.empty(),a.error){var o={fr:"Erreur",en:"Error"};return n.append('<div class="form-element"><label>'+o[l]+':</label><span class="value">'+a.error+"</span></div>"),new Promise((function(e,t){t(o[l])}))}switch(e){case"metar":s=new t(n,l).display(a);break;case"taf":s=new i(n,l).display(a);break;default:s=new Promise((function(t,i){i("no displayer for "+e)}))}return s.then((function(){r.appendTime(n,a)}))},e.prototype.appendTime=function(e,t){var i=this.getLang();if(t.time){var n=new Date(t.time.dt),a={fr:["Jan","Fev","Mar","Avr","Mai","Jun","Jul","Aou","Sep","Oct","Nov","Dec"],en:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}[i][n.getMonth()-1],s=n.getHours().leading(2),r=n.getMinutes().leading(2);e.append('<span class="date"><span class="month">'+a+'</span><span class="day">'+n.getDate()+"</span></span>"),e.append('<span class="time">'+s+":"+r+"</span>")}},e.prototype.init=function(e){var t=this;if(0!=e.length&&this.config&&this.config.locations)if(this.config.locations.length){e.empty();var i=this.getLang();e.append('<h3 class="weather-title"></h3');var n=jQuery('<select class="weather-location-select"></select>');e.append(n),this.config.locations.forEach((function(e,t){var i=t?"":"selected";n.append('<option value="'+e.name+'" '+i+">"+e.name+" ("+e.label+")</option>")})),n.on("change",(function(e){var i=jQuery(e.target).children("option:selected").val(),n=t.config.locations.filter((function(e){return e.name==""+i}));1==n.length&&(t.currentLocation=n[0],t.tabShowOnly("weather-loading"),t.loadWeather(t.currentTab?t.currentTab:"metar",n[0]))}));var a=jQuery('<div class="tabs"></div>');e.append(a);var s=jQuery('<div class="weather-widget-placeholder"></div>');e.append(s),s.append('<img class="weather-loading" src="'+this.config.loadingImg+'">'),this.addTab("metar","Metar",a,s,!0),this.addTab("taf","Taf",a,s),e.append('<div class="disclaimer"><span class="dashicons dashicons-warning"></span>'+{fr:"Toutes les données présentées sur ce site sont non certifiées : elles doivent être systématiquement controlées à partir de données officielles",en:"All the data presented on this site are not certified: they must be systematically checked from official data"}[i]+"</div>"),this.config.locations&&0!=this.config.locations.length&&this.loadWeather("metar",this.config.locations[0])}else console.warn("[weather]","missing locations")},e}(),a=function(){function e(e,t){void 0===t&&(t=!1),this.policy=e,this.debug=t,this.cache={},this.timeoutHandler=null}return e.prototype.load=function(e,t,i,n,a){this.reloadAt(null,e,t,i,n,a)},e.prototype.loadData=function(e,t,i,n,a){var s=this,l=this.cacheName(t,i);return new Promise((function(a,o){var c=s.cache[l];if(s.debug&&c&&c.hasExpired()&&console.log("[CACHE] expired at",c.expireAt),c&&!c.hasExpired())return s.debug&&console.log("[CACHE]",l,c.data),a(c);jQuery.getJSON([e,i.name].join("/"),(function(){})).done((function(e){s.debug&&console.log("[GET]",l,e);var i=s.policy[t]?s.policy[t].nextExpiration(e):null;s.cache[l]=new r(e,i),a(s.cache[l])})).fail((function(){o("fr"==n?"Saperlipopette ! je n'arrive pas à récupérer les données.":"OMG ! I'm not able to retrieve data.")}))})).then((function(r){a(r.data);var l=r.expireAt;return((null==l?void 0:l.getTime())||0)>(new Date).getTime()&&(s.debug&&console.log("will reload",t,i.name,"at",(null==l?void 0:l.getHours())+":"+(null==l?void 0:l.getMinutes())),s.reloadAt(l,e,t,i,n,a)),r})).catch((function(e){return console.warn(e),a({error:e,station:i.name}),Promise.reject(e)}))},e.prototype.reloadAt=function(e,t,i,n,a,s){var r=this;if(null!=this.timeoutHandler&&(clearTimeout(this.timeoutHandler),this.timeoutHandler=null),null!=e){var l=e.getTime()-(new Date).getTime();if(l<=100)return this.reloadAt(null,t,i,n,a,s);this.timeoutHandler=setTimeout((function(){r.loadData(t,i,n,a,s)}),l)}else this.loadData(t,i,n,a,s)},e.prototype.cacheName=function(e,t){return e+"-"+t.name},e}(),s=function(){function e(e,t){this.frequencySecond=e,this.retrySecond=t}return e.prototype.nextExpiration=function(e){if(this.frequencySecond<=0)return null;var t=new Date(e.time.dt).getTime(),i=(new Date).getTime(),n=Math.floor(i/(1e3*this.frequencySecond))*this.frequencySecond*1e3,a=Math.ceil(i/(1e3*this.frequencySecond))*this.frequencySecond*1e3;return n==t?new Date(a):new Date(1e3*this.retrySecond+i)},e}(),r=function(){function e(e,t){this.data=e,this.expireAt=t}return e.prototype.hasExpired=function(){return null==this.expireAt||this.expireAt.getTime()<(new Date).getTime()+1e3},e}();jQuery((function(){new n(new a({taf:new s(10800,600),metar:new s(1800,120)},!0)).init(jQuery("div.weather-plugin"))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,