(()=>{"use strict";var t=function(){function t(t){this.ctx=t.getContext("2d"),this.centerY=130-2/3*t.height,this.centerX=t.width/2}return t.prototype.clear=function(){this.ctx.clearRect(0,0,2*this.centerX,2*this.centerY)},t.prototype.display=function(t,e,i){this.clear(),this.temperatures(e,t,{fr:{temp:"Temp",dew:"Rosée"},en:{temp:"Temp",dew:"Dew"}}[i]),this.mainPath();for(var n=-10;n<40;n+=2)n%10==0?this.gradMain(n):this.gradMin(n)},t.prototype.gradMain=function(t){this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,-this.centerY),this.ctx.lineJoin="miter",this.ctx.strokeStyle="rgb(0, 0, 0)",this.ctx.lineCap="butt",this.ctx.miterLimit=4,this.ctx.lineWidth=.8,this.ctx.moveTo(-3.316646,130-1.25*t),this.ctx.lineTo(-.490521,130-1.25*t),this.ctx.stroke(),this.ctx.restore()},t.prototype.gradMin=function(t){this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,-this.centerY),this.ctx.lineJoin="miter",this.ctx.strokeStyle="rgb(0, 0, 0)",this.ctx.lineCap="butt",this.ctx.miterLimit=4,this.ctx.lineWidth=.8,this.ctx.moveTo(-3.316646,130-1.25*t),this.ctx.lineTo(-1.844007,130-1.25*t),this.ctx.stroke(),this.ctx.restore()},t.prototype.temperatures=function(t,e,i){var n=118-1.25*e;this.ctx.save(),this.ctx.translate(this.centerX,-this.centerY),this.ctx.beginPath(),this.ctx.globalAlpha=1,this.ctx.lineJoin="miter",this.ctx.lineCap="round",this.ctx.miterLimit=4,this.ctx.lineWidth=.28233,this.ctx.fillStyle="rgb(76, 160, 240)",this.ctx.moveTo(3.306247,148.25101),this.ctx.bezierCurveTo(6.66601,149.88235,8.391984,153.58579,7.536901,157.17246),this.ctx.lineTo(7.536897,157.17246),this.ctx.bezierCurveTo(6.681814,160.75912,3.470619,163.28552,-.216532,163.27246),this.ctx.bezierCurveTo(-3.903689,163.26006,-7.096908,160.7103,-7.926552,157.11768),this.ctx.bezierCurveTo(-8.75619,153.52504,-7.004019,149.83393,-3.658104,148.24711),this.ctx.lineTo(-3.637364,n),this.ctx.lineTo(3.287017,n),this.ctx.fill(),this.ctx.restore(),this.ctx.save(),this.ctx.translate(this.centerX,-this.centerY),this.ctx.textBaseline="middle",this.ctx.textAlign="right",this.ctx.lineJoin="miter",this.ctx.lineCap="butt",this.ctx.lineWidth=.070004,this.ctx.fillStyle="rgb(0, 0, 0)",this.ctx.font="normal normal 14.11111069px sans-serif",this.ctx.fillText(i.dew+" "+e+"°c",-5.506297,n),this.ctx.restore(),this.ctx.save(),this.ctx.translate(this.centerX,-this.centerY);var s=118-1.25*t;if(t>e){var a=n-s;this.ctx.beginPath(),this.ctx.globalAlpha=1,this.ctx.lineJoin="miter",this.ctx.lineCap="round",this.ctx.miterLimit=4,this.ctx.lineWidth=.220089,this.ctx.fillStyle="rgb(76, 240, 166)",this.ctx.rect(-3.424305,s,6.84869,a),this.ctx.fill()}else a=s-n,this.ctx.beginPath(),this.ctx.globalAlpha=1,this.ctx.lineJoin="miter",this.ctx.lineCap="round",this.ctx.miterLimit=4,this.ctx.lineWidth=.220089,this.ctx.fillStyle="rgb(76, 240, 166)",this.ctx.rect(-.424305,n,4.6,a),this.ctx.fill();this.ctx.restore(),this.ctx.save(),this.ctx.translate(this.centerX,-this.centerY),this.ctx.textBaseline="middle",this.ctx.textAlign="left",this.ctx.lineJoin="miter",this.ctx.lineCap="butt",this.ctx.lineWidth=.070004,this.ctx.fillStyle="rgb(0, 0, 0)",this.ctx.font="normal normal 14.11111069px sans-serif",this.ctx.fillText(i.temp+" "+t+"°c",7.427047,s),this.ctx.restore()},t.prototype.mainPath=function(){this.ctx.save(),this.ctx.translate(this.centerX,-this.centerY),this.ctx.beginPath(),this.ctx.globalAlpha=1,this.ctx.lineJoin="miter",this.ctx.strokeStyle="rgb(0, 0, 0)",this.ctx.lineCap="round",this.ctx.miterLimit=4,this.ctx.lineWidth=.546893,this.ctx.moveTo(7.399523,157.17246),this.ctx.bezierCurveTo(6.54444,160.75912,3.333243,163.28552,-.353908,163.27246),this.ctx.bezierCurveTo(-4.041064,163.26006,-7.234283,160.7103,-8.063927,157.11768),this.ctx.bezierCurveTo(-8.893564,153.52504,-7.141395,149.83393,-3.79548,148.24711),this.ctx.lineTo(-3.73333,58.828684),this.ctx.bezierCurveTo(-3.72152,57.592884,-3.054413,56.454134,-1.977368,55.849594),this.ctx.bezierCurveTo(-.900325,55.245034,.419135,55.268714,1.473777,55.911494),this.ctx.bezierCurveTo(2.528417,56.554384,3.154061,57.716314,3.111252,58.889984),this.ctx.lineTo(3.168862,148.25101),this.ctx.bezierCurveTo(6.528629,149.88236,8.254603,153.5858,7.399522,157.17248),this.ctx.stroke(),this.ctx.restore()},t}(),e=function(){function t(t){this.ctx=t.getContext("2d"),this.centerY=t.height/2,this.centerX=t.width/2,this.square=2*(this.centerY>this.centerX?this.centerX:this.centerY),this.clear();for(var e=0;e<360;e+=10)this.displayMark(e,"#888");for(e=45;e<360;e+=90)this.displayCardinal(e,!1,{color:"#cecece"}),this.displayCardinal(e,!0,{color:"#dfdfdf"});for(e=0;e<360;e+=90)this.displayCardinal(e,!1,{color:"#ccc"}),this.displayCardinal(e,!0,{color:"#ddd"})}return t.prototype.clear=function(){this.ctx.clearRect(0,0,2*this.centerX,2*this.centerY)},t.prototype.displayCardinal=function(t,e,i){var n=i&&i.width||this.square/15,s=i&&i.height||this.square/2,a=i&&i.color||"#ccc";this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(t*Math.PI/180),this.ctx.moveTo(e?n:-n,-n),this.ctx.lineTo(0,-s),this.ctx.lineTo(0,0),this.ctx.lineTo(e?n:-n,-n),this.ctx.fillStyle=a,this.ctx.fill(),this.ctx.closePath(),this.ctx.restore()},t.prototype.displayMark=function(t,e){void 0===e&&(e="#000"),this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(t*Math.PI/180),this.ctx.moveTo(0,-this.square/2),this.ctx.lineTo(0,-this.square/2*.95),this.ctx.strokeStyle=e,this.ctx.stroke(),this.ctx.closePath(),this.ctx.restore()},t.prototype.displayWind=function(t,e,i,n){if(void 0===e&&(e=""),void 0===i&&(i=18),void 0===n&&(n="#1d528e"),null!=t){this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(t*Math.PI/180),this.ctx.moveTo(0,-this.square/5),this.ctx.lineTo(0,-this.square/2*.93),this.ctx.strokeStyle=n,this.ctx.stroke(),this.ctx.closePath(),this.ctx.restore();var s=this.square/25;this.ctx.save(),this.ctx.beginPath(),this.ctx.translate(this.centerX,this.centerY),this.ctx.rotate(t*Math.PI/180),this.ctx.moveTo(.5*s,-s-this.square/5),this.ctx.lineTo(0,-this.square/5),this.ctx.lineTo(.5*-s,-s-this.square/5),this.ctx.moveTo(.5*s,-s-this.square/5),this.ctx.fillStyle=n,this.ctx.fill(),this.ctx.closePath(),this.ctx.restore()}this.ctx.save(),this.ctx.translate(this.centerX,this.centerY),this.ctx.font=i+"px sans serif",this.ctx.textAlign="center",this.ctx.textBaseline="middle",this.ctx.fillStyle=n,null!=t&&this.ctx.fillText(t.toFixed(0)+"°",0,i/1.8),this.ctx.fillText(""+e,0,-i/1.8),this.ctx.restore()},t}(),i=function(){function i(t,e){this.container=t,this.lang=e}return i.prototype.display=function(i){var n=this;return new Promise((function(s,a){var r,c={fr:{wind:"Vent",temp:"Temp",dew:"Rosée",pressure:"Pression",visibility:"Visibilité",error:"Erreur",raw:"Original"},en:{wind:"Wind",temp:"Temp",dew:"Dew",pressure:"Pressure",visibility:"Visibility",error:"error",raw:"Original"}};if(i.wind_speed){var l=(r=jQuery('<canvas class="wind" width="100px" height="100px"></canvas>')).get(0);n.container.append(r),new e(l).displayWind(i.wind_direction.value,i.wind_speed.value+" "+i.units.wind_speed,15,"#ca2017")}i.temperature&&(l=(r=jQuery('<canvas class="temperature" width="150px" height="120px"></canvas>')).get(0),n.container.append(r),new t(l).display(i&&i.dewpoint&&i.dewpoint.value||0,i&&i.temperature&&i.temperature.value||0,n.lang));if(i.altimeter&&n.container.append('<div class="form-element"><label>'+c[n.lang].pressure+':</label><span class="value">'+i.altimeter.value+"<em>"+i.units.altimeter+"</em></span></div>"),i.visibility){var o='<span class="value">'+i.visibility.value+"<em>"+i.units.visibility+"</em></span>";"CAVOK"==i.visibility.repr&&(o='<span class="value">'+{fr:"Nuages et visibilité sont OK,",en:"Ceiling and visibility OK"}[n.lang]+"</span>"),n.container.append('<div class="form-element"><label>'+c[n.lang].visibility+":</label>"+o+"</div>")}if(i.remarks){var h={fr:{NOSIG:"Aucun changement significatif dans les deux heures à venir",BECMG:"Changements prévus entre les heures indiquées",GRADU:"Changements prévus qui va arriver progressivement",RAPID:"Changements prévus rapidement (avant une demi-heure en moyenne)",TEMPO:"Fluctuations temporaires dans un bloc de 1 à 4 heures.",INTER:"Changements fréquents mais brefs",TEND:"Tendance"},en:{NOSIG:"No significant change",BECMG:"Becoming",GRADU:"Gradualy",RAPID:"Rapidly",TEMPO:"Temporary changes expected",INTER:"Intermittent",TEND:"Trend"}}[n.lang][i.remarks];h||(h=i.remarks),n.container.append('<div class="form-element"><label>Remarque:</label><span class="value">'+h+"</span></div>")}if(i.clouds&&i.clouds.length){var u={fr:{SKC:"aucun nuage [SKC]",FEW:"quelques nuages, 1/8 à 2/8 du ciel couvert [FEW]",SCT:"épars, 3/8 à 4/8 du ciel couvert [SCT]",BKN:"fragmenté, 5/8 à 7/8 du ciel couvert [BKN]",OVC:"couvert, 8/8 du ciel couvert [OVC]",NSC:"aucun nuage d'une hauteur inférieure à 5 000 pieds ou sous l'altitude minimale de secteur [NSC]"},en:{SKC:"sky [SKC]",FEW:"few, 1/8 - 2/8 [FEW]",SCT:"scattered, 3/8 - 4/8 [SCT]",BKN:"broken, 5/8 - 7/8 [BKN]",OVC:"overcast, 8/8 [OVC]",NSC:"No significant clouds [NSC]"}},d=i.clouds.map((function(t){return'<li class="cloud-item"><span class="cloud-altitude">Alt '+t.altitude+" "+i.units.altitude+":</span> "+u[n.lang][t.type]+"</li>"}));n.container.append('<div class="form-element"><label>Nuages:</label><ul class="value">'+d.join("\n")+"</ul></div>")}i.raw&&n.container.append('<div class="form-element"><label>'+c[n.lang].raw+':</label><span class="value">'+i.raw+"</span></div>"),s(i)}))},i}(),n=function(){function t(t,e){this.container=t,this.lang=e}return t.prototype.display=function(t){var e=this;return new Promise((function(n,s){var a={};if(!t.forecast.length)return n(t);var r=jQuery('<div class="switch-box source-selector"></div>');r.append('<label for="default" class="switch-box-label">MVFR</label>');var c=jQuery('<input id="default" class="switch-box-input" type="checkbox" />');r.append(c),r.append('<label for="default" class="switch-box-slider"></label>'),r.append('<label for="default" class="switch-box-label">IFR</label>'),e.container.append(r),c.on("change",(function(t){var e=jQuery(t.target).is(":checked")?"IFR":"MVFR";Object.keys(a).forEach((function(t){a[t].container.removeClass("visible")})),a[e]&&a[e].container&&a[e].container.addClass("visible")}));var l=jQuery('<div class="forecast"></div>');e.container.append(l),t.forecast.forEach((function(n){a[n.flight_rules]||(a[n.flight_rules]={container:jQuery('<div class="'+n.flight_rules+'"></div>'),timeline:jQuery('<div class="timeline"></div>'),data:{}},l.append(a[n.flight_rules].container),a[n.flight_rules].container.append(a[n.flight_rules].timeline)),a[n.flight_rules].data[n.end_time.dt]=n;var s=n;s.frame=jQuery('<div class="tab"></div>'),a[n.flight_rules].container.append(s.frame),s.units=t.units;var r=new Date(n.end_time.dt),c=jQuery('<button class="time-tab">'+r.getDate().leading(2)+"/"+r.getMonth()+" "+r.getHours().leading(2)+":"+r.getMinutes().leading(2)+"</button>");a[n.flight_rules].timeline.append(c),1==Object.keys(a[n.flight_rules].data).length&&(a[n.flight_rules].data[n.end_time.dt].frame.addClass("visible"),c.addClass("selected")),c.on("click",(function(t){a[n.flight_rules].timeline.children().each((function(t,e){jQuery(e).removeClass("selected")})),jQuery(t.target).addClass("selected"),a[n.flight_rules].container.find("div.tab").each((function(t,e){jQuery(e).removeClass("visible")})),a[n.flight_rules].data[n.end_time.dt].frame.addClass("visible")})),new i(s.frame,e.lang).display(s)})),a.MVFR.container.addClass("visible"),t.raw&&e.container.append('<div class="form-element"><label>Taf:</label><span class="value">'+t.raw+"</span></div>"),n(t)}))},t}();Number.prototype.leading=function(t,e){return void 0===e&&(e="0"),(Array(t).fill(e).join("")+this).substr(-t)};var s=function(){function t(t){this.dl=t,this.currentTab="metar",this.config=window.weatherConfig,this.currentLocation=this.config.locations[0]}return t.prototype.getLang=function(){return"fr"==this.config.lang?this.config.lang:"en"},t.prototype.tabShowOnly=function(t){jQuery("div.weather-widget-placeholder").children().each((function(e,i){jQuery(i).css("display","none"),jQuery("."+t).css("display","block")}))},t.prototype.addTab=function(t,e,i,n,s){var a=this;void 0===s&&(s=!1);var r=jQuery('<button class="'+(s?"selected":"")+'">'+e+"</button>");r.on("click",(function(e){i.children().each((function(t,e){jQuery(e).removeClass("selected")})),jQuery(e.currentTarget).addClass("selected"),a.tabShowOnly("weather-loading"),a.currentTab=t,a.loadWeather(t,a.currentLocation)})),i.append(r),n.append('<div class="tab-'+t+'"></div>')},t.prototype.loadWeather=function(t,e){var i=this;this.dl.load(this.config.url[t],t,e,this.getLang(),(function(e){e.station.toUpperCase(),i.tabShowOnly("tab-"+t),i.displayData(t,jQuery("div.tab-"+t),e)}))},t.prototype.displayData=function(t,e,s){var a,r=this,c=this.getLang();if(e.empty(),s.error){var l={fr:"Erreur",en:"Error"};return e.append('<div class="form-element"><label>'+l[c]+':</label><span class="value">'+s.error+"</span></div>"),new Promise((function(t,e){e(l[c])}))}switch(t){case"metar":a=new i(e,c).display(s);break;case"taf":a=new n(e,c).display(s);break;default:a=new Promise((function(e,i){i("no displayer for "+t)}))}return a.then((function(){r.appendTime(e,s)}))},t.prototype.appendTime=function(t,e){var i=this.getLang();if(e.time){var n=new Date(e.time.dt),s={fr:["Jan","Fev","Mar","Avr","Mai","Jun","Jul","Aou","Sep","Oct","Nov","Dec"],en:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}[i][n.getMonth()-1],a=n.getHours().leading(2),r=n.getMinutes().leading(2);t.append('<span class="date"><span class="month">'+s+'</span><span class="day">'+n.getDate()+"</span></span>"),t.append('<span class="time">'+a+":"+r+"</span>")}},t.prototype.init=function(t){var e=this;if(0!=t.length&&this.config&&this.config.locations)if(this.config.locations.length){t.empty();var i=this.getLang();t.append('<h3 class="weather-title"></h3');var n=jQuery('<select class="weather-location-select"></select>');t.append(n),this.config.locations.forEach((function(t,e){var i=e?"":"selected";n.append('<option value="'+t.name+'" '+i+">"+t.name+" ("+t.label+")</option>")})),n.on("change",(function(t){var i=jQuery(t.target).children("option:selected").val(),n=e.config.locations.filter((function(t){return t.name==""+i}));1==n.length&&(e.currentLocation=n[0],e.tabShowOnly("weather-loading"),e.loadWeather(e.currentTab?e.currentTab:"metar",n[0]))}));var s=jQuery('<div class="tabs"></div>');t.append(s);var a=jQuery('<div class="weather-widget-placeholder"></div>');t.append(a),a.append('<img class="weather-loading" src="'+this.config.loadingImg+'">'),this.addTab("metar","Metar",s,a,!0),this.addTab("taf","Taf",s,a),t.append('<div class="disclaimer"><span class="dashicons dashicons-warning"></span>'+{fr:"Toutes les données présentées sur ce site sont non certifiées : elles doivent être systématiquement controlées à partir de données officielles",en:"All the data presented on this site are not certified: they must be systematically checked from official data"}[i]+"</div>"),this.config.locations&&0!=this.config.locations.length&&this.loadWeather("metar",this.config.locations[0])}else console.warn("[weather]","missing locations")},t}(),a=function(){function t(t,e){void 0===e&&(e=!1),this.policy=t,this.debug=e,this.cache={},this.timeoutHandler=null}return t.prototype.load=function(t,e,i,n,s){this.reloadAt(null,t,e,i,n,s)},t.prototype.loadData=function(t,e,i,n,s){var a=this,r=this.cacheName(e,i);return new Promise((function(s,l){var o=a.cache[r];if(a.debug&&o&&o.hasExpired()&&console.log("[CACHE] expired at",o.expireAt),o&&!o.hasExpired())return a.debug&&console.log("[CACHE]",r,o.data),s(o);jQuery.getJSON([t,i.name].join("/"),(function(){})).done((function(t){a.debug&&console.log("[GET]",r,t);var i=a.policy[e]?a.policy[e].nextExpiration(t):null;a.cache[r]=new c(t,i),s(a.cache[r])})).fail((function(){l("fr"==n?"Saperlipopette ! je n'arrive pas à récupérer les données.":"OMG ! I'm not able to retrieve data.")}))})).then((function(r){s(r.data);var c=r.expireAt;return((null==c?void 0:c.getTime())||0)>(new Date).getTime()&&(a.debug&&console.log("will reload",e,i.name,"at",(null==c?void 0:c.getHours())+":"+(null==c?void 0:c.getMinutes())),a.reloadAt(c,t,e,i,n,s)),r})).catch((function(t){return console.warn(t),s({error:t,station:i.name}),Promise.reject(t)}))},t.prototype.reloadAt=function(t,e,i,n,s,a){var r=this;if(null!=this.timeoutHandler&&(clearTimeout(this.timeoutHandler),this.timeoutHandler=null),null!=t){var c=t.getTime()-(new Date).getTime();if(c<=100)return this.reloadAt(null,e,i,n,s,a);this.timeoutHandler=setTimeout((function(){r.loadData(e,i,n,s,a)}),c)}else this.loadData(e,i,n,s,a)},t.prototype.cacheName=function(t,e){return t+"-"+e.name},t}(),r=function(){function t(t,e){this.frequencySecond=t,this.retrySecond=e}return t.prototype.nextExpiration=function(t){if(this.frequencySecond<=0)return null;var e=new Date(t.time.dt).getTime(),i=(new Date).getTime(),n=Math.floor(i/(1e3*this.frequencySecond))*this.frequencySecond*1e3,s=Math.ceil(i/(1e3*this.frequencySecond))*this.frequencySecond*1e3;return n==e?new Date(s):new Date(1e3*this.retrySecond+i)},t}(),c=function(){function t(t,e){this.data=t,this.expireAt=e}return t.prototype.hasExpired=function(){return null==this.expireAt||this.expireAt.getTime()<(new Date).getTime()+1e3},t}();jQuery((function(){new s(new a({taf:new r(10800,600),metar:new r(1800,120)},!0)).init(jQuery("div.weather-plugin"))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,